:DOC-CONFIG:
# Tangle by default to config.el, which is the most common case
#+property: header-args:emacs-lisp :tangle config.el
#+property: header-args :mkdirp yes :comments no
#+startup: fold
:END:

#+title: Doom Emacs configuration
#+author: chengzh2008

This is my Doom Emacs configuration. From this org file, all the necessary Doom Emacs config files are generated.

** Doom Emacs uses three config files:

- =init.el= defines which of the existing Doom [[https://github.com/hlissner/doom-emacs/blob/develop/docs/getting_started.org#modules][modules]] are loaded. A Doom module is a bundle of packages, configuration and commands, organized into a unit that can be toggled easily from this file.
- =packages.el= defines which [[https://github.com/hlissner/doom-emacs/blob/develop/docs/getting_started.org#package-management][packages]] should be installed, beyond those that are installed and loaded as part of the enabled modules.
- =config.el= contains all [[https://github.com/hlissner/doom-emacs/blob/develop/docs/getting_started.org#configuring-doom][custom configuration]] and code.

All the config files are generated from this Org file, to try and make its meaning as clear as possible. All =package!= declarations are written to =packages.el=, all other LISP code is written to =config.el=.

** Config file headers

We start by simply defining the standard headers used by the three files. These headers come from the initial files generated by =doom install=, and contain either some Emacs-LISP relevant indicators like =lexical-binding=, or instructions about the contents of the file.

#+html: <details><summary>init.el</summary>
#+begin_src emacs-lisp :tangle init.el
;;; init.el -*- lexical-binding: t; -*-

;; DO NOT EDIT THIS FILE DIRECTLY
;; This is a file generated from a literate programing source file located at
;; https://gitlab.com/zzamboni/dot-doom/-/blob/master/doom.org
;; You should make any changes there and regenerate it from Emacs org-mode
;; using org-babel-tangle (C-c C-v t)

;; This file controls what Doom modules are enabled and what order they load
;; in. Remember to run 'doom sync' after modifying it!

;; NOTE Press 'SPC h d h' (or 'C-h d h' for non-vim users) to access Doom's
;;      documentation. There you'll find a "Module Index" link where you'll find
;;      a comprehensive list of Doom's modules and what flags they support.

;; NOTE Move your cursor over a module's name (or its flags) and press 'K' (or
;;      'C-c c k' for non-vim users) to view its documentation. This works on
;;      flags as well (those symbols that start with a plus).
;;
;;      Alternatively, press 'gd' (or 'C-c c d') on a module to browse its
;;      directory (for easy access to its source code).
#+end_src
#+html: </details>

#+html: <details><summary>packages.el</summary>
#+begin_src emacs-lisp :tangle packages.el
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el

;; DO NOT EDIT THIS FILE DIRECTLY
;; This is a file generated from a literate programing source file located at
;; https://gitlab.com/zzamboni/dot-doom/-/blob/master/doom.org
;; You should make any changes there and regenerate it from Emacs org-mode
;; using org-babel-tangle (C-c C-v t)

;; To install a package with Doom you must declare them here and run 'doom sync'
;; on the command line, then restart Emacs for the changes to take effect -- or
;; use 'M-x doom/reload'.

;; To install SOME-PACKAGE from MELPA, ELPA or emacsmirror:
;;(package! some-package)

;; To install a package directly from a remote git repo, you must specify a
;; `:recipe'. You'll find documentation on what `:recipe' accepts here:
;; https://github.com/raxod502/straight.el#the-recipe-format
;;(package! another-package
;;  :recipe (:host github :repo "username/repo"))

;; If the package you are trying to install does not contain a PACKAGENAME.el
;; file, or is located in a subdirectory of the repo, you'll need to specify
;; `:files' in the `:recipe':
;;(package! this-package
;;  :recipe (:host github :repo "username/repo"
;;           :files ("some-file.el" "src/lisp/*.el")))

;; If you'd like to disable a package included with Doom, you can do so here
;; with the `:disable' property:
;;(package! builtin-package :disable t)

;; You can override the recipe of a built in package without having to specify
;; all the properties for `:recipe'. These will inherit the rest of its recipe
;; from Doom or MELPA/ELPA/Emacsmirror:
;;(package! builtin-package :recipe (:nonrecursive t))
;;(package! builtin-package-2 :recipe (:repo "myfork/package"))

;; Specify a `:branch' to install a package from a particular branch or tag.
;; This is required for some packages whose default branch isn't 'master' (which
;; our package manager can't deal with; see raxod502/straight.el#279)
;;(package! builtin-package :recipe (:branch "develop"))

;; Use `:pin' to specify a particular commit to install.
;;(package! builtin-package :pin "1a2b3c4d5e")

;; Doom's packages are pinned to a specific commit and updated from release to
;; release. The `unpin!' macro allows you to unpin single packages...
;;(unpin! pinned-package)
;; ...or multiple packages
;;(unpin! pinned-package another-pinned-package)
;; ...Or *all* packages (NOT RECOMMENDED; will likely break things)
;;(unpin! t)
#+end_src
#+html: </details>

#+html: <details><summary>config.el</summary>
#+begin_src emacs-lisp :tangle config.el
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; DO NOT EDIT THIS FILE DIRECTLY
;; This is a file generated from a literate programing source file located at
;; https://gitlab.com/zzamboni/dot-doom/-/blob/master/doom.org
;; You should make any changes there and regenerate it from Emacs org-mode
;; using org-babel-tangle (C-c C-v t)

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!

;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
;; (setq user-full-name ""
;;      user-mail-address "")
#+end_src
#+html: </details>

** Customized variables

Doom [[https://github.com/hlissner/doom-emacs/blob/develop/docs/getting_started.org#configure][does not recommend the Emacs =customize= mechanism]]:

#+begin_quote
/Note: do not use M-x customize or the customize API in general. Doom is designed to be configured programmatically from your config.el, which can conflict with Customizeâ€™s way of modifying variables./
#+end_quote

All necessary settings are therefore set by hand as part of this configuration file. The only exceptions are "safe variable" and "safe theme" settings, which are automatically saved by Emacs in =custom.el=, but this is OK as they don't conflict with anything else from the config.


* Doom modules

This code is written to the =init.el= to select which modules to load. Written here as-is for now, as it is quite well structured and clear.

#+begin_src emacs-lisp :tangle init.el
(doom! :input
       ;;chinese
       ;;japanese
       ;;layout            ; auie,ctsrnm is the superior home row

       :completion
       company             ; the ultimate code completion backend
       ;;helm              ; the *other* search engine for love and life
       ;;ido               ; the other *other* search engine...
       ;;ivy               ; a search engine for love and life
       vertico             ; the search engine of the future

       :ui
       ;;deft              ; notational velocity for Emacs
       doom              ; what makes DOOM look the way it does
       doom-dashboard    ; a nifty splash screen for Emacs
       doom-quit         ; DOOM quit-message prompts when you quit Emacs
       ;;(emoji +unicode)  ; ðŸ™‚
       ;;fill-column       ; a `fill-column' indicator
       hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       ;;hydra
       ;;indent-guides     ; highlighted indent columns
       (ligatures +extra +fira)         ; ligatures and symbols to make your code pretty again
       ;;minimap           ; show a map of the code on the side
       modeline          ; snazzy, Atom-inspired modeline, plus API
       ;;nav-flash         ; blink cursor line after big motions
       ;; neotree           ; a project drawer, like NERDTree for vim
       ophints           ; highlight the region an operation acts on
       (popup +defaults)   ; tame sudden yet inevitable temporary windows
       ;;tabs              ; a tab bar for Emacs
       treemacs          ; a project drawer, like neotree but cooler
       ;;unicode           ; extended unicode support for various languages
       (vc-gutter +pretty)        ; vcs diff in the fringe
       vi-tilde-fringe   ; fringe tildes to mark beyond EOB
       ;;window-select     ; visually switch windows
       workspaces        ; tab emulation, persistence & separate workspaces
       zen               ; distraction-free coding or writing

       :editor
       (evil +everywhere); come to the dark side, we have cookies
       file-templates    ; auto-snippets for empty files
       fold              ; (nigh) universal code folding
       (format +onsave)  ; automated prettiness
       ;;god               ; run Emacs commands without modifier keys
       ;;lispy             ; vim for lisp, for people who don't like vim
       ;;multiple-cursors  ; editing in many places at once
       ;;objed             ; text object editing for the innocent
       ;;parinfer          ; turn lisp into python, sort of
       ;;rotate-text       ; cycle region at point between text candidates
       snippets          ; my elves. They type so I don't have to
       word-wrap         ; soft wrapping with language-aware indent

       :emacs
       dired             ; making dired pretty [functional]
       electric          ; smarter, keyword-based electric-indent
       ;;ibuffer         ; interactive buffer management
       undo              ; persistent, smarter undo for your inevitable mistakes
       vc                ; version-control and Emacs, sitting in a tree

       :term
       ;;eshell            ; the elisp shell that works everywhere
       ;;shell             ; simple shell REPL for Emacs
       ;;term              ; basic terminal emulator for Emacs
       ;;vterm             ; the best terminal emulation in Emacs

       :checkers
       syntax              ; tasing you for every semicolon you forget
       (spell +flyspell) ; tasing you for misspelling mispelling
       ;;grammar           ; tasing grammar mistake every you make

       :tools
       ;;ansible
       ;;debugger          ; FIXME stepping through code, to help you add bugs
       direnv
       ;;docker
       ;;editorconfig      ; let someone else argue about tabs vs spaces
       ;;ein               ; tame Jupyter notebooks with emacs
       (eval +overlay)     ; run code, run (also, repls)
       ;;gist              ; interacting with github gists
       lookup              ; navigate your code and its documentation
       lsp
       (magit +forge)             ; a git porcelain for Emacs
       ;;make              ; run make tasks from Emacs
       ;;pass              ; password manager for nerds
       ;;pdf               ; pdf enhancements
       ;;prodigy           ; FIXME managing external services & code builders
       ;;rgb               ; creating color strings
       ;;taskrunner        ; taskrunner for all your projects
       ;;terraform         ; infrastructure as code
       ;;tmux              ; an API for interacting with tmux
       ;;upload            ; map local to remote projects via ssh/ftp

       :os
       (:if IS-MAC macos)  ; improve compatibility with macOS
       ;;(tty +osc)               ; improve the terminal Emacs experience

       :lang
       ;;agda              ; types of types of types of types...
       ;;beancount         ; mind the GAAP
       ;;(cc +lsp)                 ; C > C++ == 1
       ;;clojure           ; java with a lisp
       ;;common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       ;;csharp            ; unity, .NET, and mono shenanigans
       ;;data              ; config/data formats
       ;;(dart +flutter)   ; paint ui and not much else
       ;;elixir            ; erlang done right
       ;;elm               ; care for a cup of TEA?
       emacs-lisp        ; drown in parentheses
       ;;erlang            ; an elegant language for a more civilized age
       ;;ess               ; emacs speaks statistics
       ;;factor
       ;;faust             ; dsp, but you get to keep your soul
       ;;fsharp            ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       ;;gdscript          ; the language you waited for
       ;;(go +lsp)         ; the hipster dialect
       ;;(haskell +dante +lsp)  ; a language that's lazier than I am
       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ; a language you can depend on
       json              ; At least it ain't XML
       ;;(java +lsp) ; the poster child for carpal tunnel syndrome
       ;;; TODO tried with (javascript + lsp) leads to wrong formatting result ???
       ;;javascript       ; all(hope(abandon(ye(who(enter(here))))))
       ;;julia             ; a better, faster MATLAB
       ;;kotlin            ; a better, slicker Java(Script)
       ;;latex             ; writing papers in Emacs has never been so fun
       ;;lean              ; for folks with too much to prove
       ;;ledger            ; be audit you can be
       ;;lua               ; one-based indices? one-based indices
       markdown          ; writing docs for people to ignore
       ;;nim               ; python + lisp at the speed of c
       nix               ; I hereby declare "nix geht mehr!"
       ;;ocaml             ; an objective camel
       (org +pretty
            +gnuplot
            +pandoc
            +roam2
            ;;+jupyter
            +present
            )               ; organize your plain life in plain text
       ;;php               ; perl's insecure younger brother
       ;;plantuml          ; diagrams for confusing people more
       ;;purescript        ; javascript, but functional
       ;;(python +lsp +conda)
       ;;qt                ; the 'cutest' gui framework eve r
       ;;(racket +lsp)            ; a DSL for DSLs
       ;;raku              ; the artist formerly known as perl6
       ;;rest              ; Emacs as a REST client
       ;;rst               ; ReST in peace
       ;;(ruby)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       ;;(rust +lsp)         ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;(scala +lsp)             ; java, but good
       ;;(scheme +chez)   ; a fully conniving family of lisps
       ;;(sh +lsp)                ; she sells {ba,z,fi}sh shells on the C xor
       ;;sml
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       ;;(web +lsp)               ; the tubes
       (yaml +lsp)             ; JSON, but readable
       ;;zig               ; C, but simpler

       :email
       ;;(mu4e +gmail)
       ;;notmuch
       ;;(wanderlust +gmail)

       :app
       ;;calendar
       ;;emms
       ;;everywhere        ; *leave* Emacs!? You must be joking
       ;;irc               ; how neckbeards socialize
       ;;(rss +org)        ; emacs as an RSS reader
       ;;twitter           ; twitter client https://twitter.com/vnought

       :config
       ;;literate
       ;;(default +bindings +smartparens))
       (default +bindings +smartparens))
#+end_src


* General configuration
** My user configuration packages.el

#+begin_src emacs-lisp :tangle packages.el
;;(after! projectile (setq projectile-project-root-files-bottom-up (remove
;;            ".git" projectile-project-root-files-bottom-up)))

;; (package! ein :recipe (:host github
;;                        :repo "millejoh/emacs-ipython-notebook"
;;                        :files ("lisp/*.el")
;;                        :build (:not compile)))
(package! ox-reveal)
(package! org-auto-tangle)
(package! lsp-origami)
;; (package! web-mode)
;; (package! geiser-chez)
;;(package! gptel)
;;(package! ob-http)
#+end_src

** My user configuration config.el

*** Disable exit confirmation
#+begin_src emacs-lisp :tangle config.el
(setq confirm-kill-emacs t)
#+end_src

*** Ruby settings
#+begin_src emacs-lisp :tangle config.el
;; (setq lsp-clients-ruby-language-server-executable "solargraph")
;; (setq lsp-ruby-use-bundler t)
;; (setq web-mode-engines-alist
;;       '(("ruby" ."\\.erb\\'")))
#+end_src

#+RESULTS:
: ((ruby . \.erb\'))

*** Show line number by default
#+begin_src emacs-lisp :tangle config.el
;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type t)
#+end_src
*** code folding
#+begin_src emacs-lisp :tangle config.el
;; Enable foldi ng
(setq lsp-enable-folding t)
;; Add origami and LSP integration
(use-package! lsp-origami)
(add-hook! 'lsp-after-open-hook #'lsp-origami-try-enable)
#+end_src

*** Reveal settings
C-c C-e v b to export html file for presentation
*** lsp mode
#+begin_src emacs-lisp :tangle config.el
(use-package lsp-mode
  :ensure t
  :commands (lsp lsp-deferred)
  :hook (go-mode . lsp-deferred))
#+end_src

*** Go mode setting
#+begin_src emacs-lisp :tangle config.el
;; Set up before-save hooks to format buffer and add/delete imports.
;; Make sure you don't have other gofmt/goimports hooks enabled.
(setq lsp-gopls-staticcheck t)
(setq lsp-gopls-complete-unimported t)

(defun lsp-go-install-save-hooks ()
  (add-hook 'before-save-hook #'lsp-format-buffer t t)
  (add-hook 'before-save-hook #'lsp-organize-imports t t))
(add-hook 'go-mode-hook #'lsp-go-install-save-hooks)
#+end_src

*** lsp ui
#+begin_src emacs-lisp :tangle config.el
(setq lsp-eldoc-render-all t)

;; window size
(add-hook 'window-setup-hook #'toggle-frame-maximized)

;; Optional - provides fancier overlays.
(use-package lsp-ui
  :ensure t
  :commands lsp-ui-mode)
#+end_src

*** company setting
#+begin_src emacs-lisp :tangle config.el
;; Company mode is a standard completion package that works well with lsp-mode.
(use-package company
  :ensure t
  :config
  ;; Optionally enable completion-as-you-type behavior.
  (setq company-idle-delay 0.1)
  (setq company-minimum-prefix-length 1))
#+end_src

*** yasnippet setting
#+begin_src emacs-lisp :tangle config.el
;; Optional - provides snippet support.
(use-package yasnippet
  :ensure t
  :commands yas-minor-mode
  :hook (go-mode . yas-minor-mode))
#+end_src

*** Rust mode setting
#+begin_src emacs-lisp :tangle config.el
;; rust
(setq-hook! 'rustic-mode-hook fill-column 100)
(add-hook 'rustic-mode-hook #'rainbow-delimiters-mode)
(setq rustic-indent-offset 4)
(setq rustic-lsp-server 'rust-analyzer
      lsp-rust-clippy-preference "on")
#+end_src

*** Chez scheme mode setting
# clear geiser cache issue:
Or delete .emacs.d/.local/straight/build-<version>/geise* , rm -rf ~/.emacs.d/.local/cache/eln and doom sync
#+begin_src emacs-lisp :tangle config.el
;; chez scheme
(setq geiser-chez-binary (executable-find "scheme"))
#+end_src

*** Javascript/Typescript mode setting
#+begin_src emacs-lisp :tangle config.el
;; Typescript/Javascript
(setq js-indent-level 2
      python-indent-offset 2
      typescript-indent-level 2)

(setq prettier-js-args '(
  "--trailing-comma" "all"
  "--bracket-spacing" "false"
))
#+end_src

*** Java mode setting
#+begin_src emacs-lisp :tangle no
;; (setq lsp-java-vmargs-for-lombok
;;       '("-noverify" "-Xmx1G" "-XX:+UseG1GC" "-XX:+UseStringDeduplication"
;;         "-javaagent:/Users/zcheng/code/omscs/project2-clientserver/deps/compile/lombok/1.18.6/lombok-1.18.6.jar"
;;         "-Xbootclasspath/a:/Users/zcheng/code/omscs/project2-clientserver/deps/compile/lombok/1.18.6/lombok-1.18.6.jar"))

;; java
;; (defadvice! +java-fix-meghanada-download-url-a (args)
;;   :filter-args #'meghanada--download-from-url
;;   (let ((url (pop args)))
;;     (cons (if (equal (format
;;                       "https://dl.bintray.com/mopemope/meghanada/meghanada-setup-%s.jar"
;;                       meghanada-setup-version)
;;                      url)
;;               (format
;;                "https://github.com/mopemope/meghanada-server/releases/download/v%s/meghanada-setup-%s.jar"
;;                meghanada-version
;;                meghanada-setup-version)
;;             url)
;;           args)))
#+end_src

*** Haskell mode setting
#+begin_src emacs-lisp :tangle config.el
;; Haskell
(after! haskell-mode
  ;; (set-formatter! 'hindent '("hindent") :modes '(haskell-mode literate-haskell-mode))
  ;; (add-to-list '+format-on-save-enabled-modes 'haskell-mode t)
;;
;;  ;; Improve code navigation in Haskell buffers
  (add-hook 'haskell-mode-hook #'haskell-decl-scan-mode)
  (add-hook 'haskell-mode-hook #'haskell-indentation-mode)
  (setq-hook! 'haskell-mode-hook
    outline-regexp "-- \\*+"
    ;; `haskell-mode' sets the default tab width to eight spaces for some reason
    tab-width 2))

;;(setq lsp-haskell-formatting-provider "brittany")
(setq haskell-stylish-on-save t)

;;Some Haskell preprocessors such as Happy,
;;Alex and uuagc use haskell-like syntax with a few additions.
;;For these files itâ€™s useful to have most of the functionality of haskell-mode available.
(add-to-list 'auto-mode-alist '("\\.ag$" . +robbert/basic-haskell-mode))
#+end_src

*** Scala mode setting
#+begin_src emacs-lisp :tangle config.el
;; scala
;; install metals-emacs using the following command
;; cs bootstrap \
;;   --java-opt -Xss4m \
;;   --java-opt -Xms100m \
;;   --java-opt -Dmetals.client=emacs \
;;   org.scalameta:metals_2.12:0.8.0 \
;;   -r bintray:scalacenter/releases \
;;   -r sonatype:snapshots \
;;   -o /usr/local/bin/metals-emacs -f -v -v -v

(use-package scala-mode
  :interpreter
    ("scala" . scala-mode))
(use-package lsp-metals
  :ensure t
  :custom
  ;; Metals claims to support range formatting by default but it supports range
  ;; formatting of multiline strings only. You might want to disable it so that
  ;; emacs can use indentation provided by scala-mode.
  (lsp-metals-server-args '("-J-Dmetals.allow-multiline-string-formatting=off"))
  :hook (scala-mode . lsp))
#+end_src

*** User info
#+begin_src  emacs-lisp :tangle config.el
;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
(setq user-full-name ""
      user-mail-address "")
#+end_src

*** Font setting
#+begin_src emacs-lisp :tangle config.el
;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
;; (setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
;;       doom-variable-pitch-font (font-spec :family "sans" :size 13))
;;; Add to ~/.doom.d/config.el
(setq doom-font (font-spec :family "Fira Code" :size 18)
      doom-variable-pitch-font (font-spec :family "Fira Code") ; inherits `doom-font''s :size
      doom-unicode-font (font-spec :family "Fira Mono")
      doom-big-font (font-spec :family "Fira Code" :size 22)
)

;; (let ((ligatures-to-disable '(:true :false :int :float :str :bool :list :and :or :for :not)))
(let ((ligatures-to-disable '(:true :false :str :list)))
  (dolist (sym ligatures-to-disable)
    (plist-put! +ligatures-extra-symbols sym nil)))
#+end_src

*** Theme setting

#+begin_src emacs-lisp :tangle config.el
;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
;;(setq doom-theme 'doom-one)
;;(setq neo-theme (if (display-graphic-p) 'icons 'arrow))
;;(setq neo-smart-open t)
(use-package doom-themes
  :ensure t
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-one t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  ;; (doom-themes-neotree-config)
  ;; or for treemacs users
  ;; (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
  ;; (doom-themes-treemacs-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))
  #+end_src

*** Projectile mode setting
#+begin_src  emacs-lisp :tangle config.el
;; projectile
;;(setq projectile-require-project-root t)
(setq projectile-project-search-path
      '("~/go/src/gopkg.volterra.us/via"
        "~/code/aipo"
        "~/code/c"
        "~/code/haskell"
        "~/code/omscs"
        "~/code/omscs/gios"
        "~/code/omscs/cn"
        "~/code/ml/"
        "~/code/python"
        "~/code/rust"
        "~/code/scheme"
        "~/code/scala"
        "~/code/typescript"
        "~/.config"
        "~/my-nix-config/"
        "~/notes"
        "~/org"
        "~/roamnotes"
))
;; (after! projectile (
;;     setq projectile-project-root-files-bottom-up
;;             (remove ".git" projectile-project-root-files-bottom-up)))
#+end_src

*** inotebook settting
#+begin_src emacs-lisp :tangle no
(setq ein:output-area-inlined-images t)

(use-package! ein
  :config
  (setq ob-ein-languages
   (quote
    (("ein-python" . python)
     ("ein-R" . R)
     ("ein-r" . R)
     ("ein-rust" . rust)
     ;;("ein-haskell" . haskell)
     ("ein-julia" . julia))))
  )

(after! ein:ipynb-mode                  ;
  (poly-ein-mode 1)
  (hungry-delete-mode -1)
  )
#+end_src

*** Org mode setting
#+begin_src  emacs-lisp :tangle config.el
;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory "~/org/")
(use-package! org-auto-tangle
  :defer t
  :hook (org-mode . org-auto-tangle-mode)
  :config
  (setq org-auto-tangle-default t))
(setq org-pretty-entities t)
(setq org-pretty-entities-include-sub-superscripts t)

;; use red to highlight bold text
(add-to-list 'org-emphasis-alist
             '("*" (:foreground "red")))

;; set org-roam
(setq org-roam-directory "~/roamnotes")
;; (use-package org-roam
;;   :ensure t
;;   ;; :init
;;   ;; (setq org-roam-v2-ack t)
;;   :custom
;;   (org-roam-directory "~/roamnotes")
  ;; :bind (("C-c n l" . org-roam-buffer-toggle)
  ;;        ("C-c n f" . org-roam-node-find)
  ;;        ("C-c n i" . org-roam-node-insert))
  ;; (org-roam-setup)
  ;; )
#+end_src

*** ob-http setup
https://isamert.net/2022/01/04/dealing-with-apis-jsons-and-databases-in-org-mode.html
#+begin_src emacs-lisp
;; (defun org-babel-execute:json (body params)
;;   (let ((jq (cdr (assoc :jq params)))
;;         (node (cdr (assoc :node params))))
;;     (cond
;;      (jq
;;       (with-temp-buffer
;;         ;; Insert the JSON into the temp buffer
;;         (insert body)
;;         ;; Run jq command on the whole buffer, and replace the buffer
;;         ;; contents with the result returned from jq
;;         (shell-command-on-region (point-min) (point-max) (format "jq -r \"%s\"" jq) nil 't)
;;         ;; Return the contents of the temp buffer as the result
;;         (buffer-string)))
;;      (node
;;       (with-temp-buffer
;;         (insert (format "const it = %s;" body))
;;         (insert node)
;;         (shell-command-on-region (point-min) (point-max) "node -p" nil 't)
;;         (buffer-string))))))
#+end_src

*** Yaml setup
#+begin_src emacs-lisp :tangle config.el
;; (after! yaml-mode
;;   (setq-hook! 'yaml-mode-hook +format-on-save-enabled nil))
#+end_src
*** Avy jump setup
#+begin_src emacs-lisp :tangle config.el
(setq avy-all-windows t)
(map! :leader
      :prefix "j"
      :desc "avy-goto-char-timer" "j" #'avy-goto-char-timer)
#+end_src

*** gpg setting
#+begin_src emacs-lisp :tangle config.el
;; (setq epg-gpg-program "gpg2")
(setq auth-sources '("~/.authinfo"))
#+end_src

*** chatGPT
#+begin_src emacs-lisp :tangle config.el
;; (use-package! gptel
;;   :config
;;   (setq! gptel-default-mode "org-mode")
;;   (let ((secret (auth-source-user-and-password "openai.com")))
;;     (setq gptel-api-key (car (cdr secret)))))
#+end_src
