;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; DO NOT EDIT THIS FILE DIRECTLY
;; This is a file generated from a literate programing source file located at
;; https://gitlab.com/zzamboni/dot-doom/-/blob/master/doom.org
;; You should make any changes there and regenerate it from Emacs org-mode
;; using org-babel-tangle (C-c C-v t)

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!

;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
;; (setq user-full-name ""
;;      user-mail-address "")

(setq confirm-kill-emacs t)

;; (setq lsp-clients-ruby-language-server-executable "solargraph")
;; (setq lsp-ruby-use-bundler t)
;; (setq web-mode-engines-alist
;;       '(("ruby" ."\\.erb\\'")))

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type t)

;; Enable foldi ng
(setq lsp-enable-folding t)
;; Add origami and LSP integration
(use-package! lsp-origami)
(add-hook! 'lsp-after-open-hook #'lsp-origami-try-enable)

(use-package lsp-mode
  :ensure t
  :commands (lsp lsp-deferred)
  :hook (go-mode . lsp-deferred))

;; Set up before-save hooks to format buffer and add/delete imports.
;; Make sure you don't have other gofmt/goimports hooks enabled.
(setq lsp-gopls-staticcheck t)
(setq lsp-gopls-complete-unimported t)

(defun lsp-go-install-save-hooks ()
  (add-hook 'before-save-hook #'lsp-format-buffer t t)
  (add-hook 'before-save-hook #'lsp-organize-imports t t))
(add-hook 'go-mode-hook #'lsp-go-install-save-hooks)

(setq lsp-eldoc-render-all t)

;; window size
(add-hook 'window-setup-hook #'toggle-frame-maximized)

;; Optional - provides fancier overlays.
(use-package lsp-ui
  :ensure t
  :commands lsp-ui-mode)

;; Company mode is a standard completion package that works well with lsp-mode.
(use-package company
  :ensure t
  :config
  ;; Optionally enable completion-as-you-type behavior.
  (setq company-idle-delay 0.1)
  (setq company-minimum-prefix-length 1))

;; Optional - provides snippet support.
(use-package yasnippet
  :ensure t
  :commands yas-minor-mode
  :hook (go-mode . yas-minor-mode))

;; rust
(setq-hook! 'rustic-mode-hook fill-column 100)
(add-hook 'rustic-mode-hook #'rainbow-delimiters-mode)
(setq rustic-indent-offset 4)
(setq rustic-lsp-server 'rust-analyzer
      lsp-rust-clippy-preference "on")

;; chez scheme
(setq geiser-chez-binary (executable-find "scheme"))

;; Typescript/Javascript
(setq js-indent-level 2
      python-indent-offset 2
      typescript-indent-level 2)

(setq prettier-js-args '(
  "--trailing-comma" "all"
  "--bracket-spacing" "false"
))

;; Haskell
(after! haskell-mode
  ;; (set-formatter! 'hindent '("hindent") :modes '(haskell-mode literate-haskell-mode))
  ;; (add-to-list '+format-on-save-enabled-modes 'haskell-mode t)
;;
;;  ;; Improve code navigation in Haskell buffers
  (add-hook 'haskell-mode-hook #'haskell-decl-scan-mode)
  (add-hook 'haskell-mode-hook #'haskell-indentation-mode)
  (setq-hook! 'haskell-mode-hook
    outline-regexp "-- \\*+"
    ;; `haskell-mode' sets the default tab width to eight spaces for some reason
    tab-width 2))

;;(setq lsp-haskell-formatting-provider "brittany")
(setq haskell-stylish-on-save t)

;;Some Haskell preprocessors such as Happy,
;;Alex and uuagc use haskell-like syntax with a few additions.
;;For these files itâ€™s useful to have most of the functionality of haskell-mode available.
(add-to-list 'auto-mode-alist '("\\.ag$" . +robbert/basic-haskell-mode))

;; scala
;; install metals-emacs using the following command
;; cs bootstrap \
;;   --java-opt -Xss4m \
;;   --java-opt -Xms100m \
;;   --java-opt -Dmetals.client=emacs \
;;   org.scalameta:metals_2.12:0.8.0 \
;;   -r bintray:scalacenter/releases \
;;   -r sonatype:snapshots \
;;   -o /usr/local/bin/metals-emacs -f -v -v -v

(use-package scala-mode
  :interpreter
    ("scala" . scala-mode))
(use-package lsp-metals
  :ensure t
  :custom
  ;; Metals claims to support range formatting by default but it supports range
  ;; formatting of multiline strings only. You might want to disable it so that
  ;; emacs can use indentation provided by scala-mode.
  (lsp-metals-server-args '("-J-Dmetals.allow-multiline-string-formatting=off"))
  :hook (scala-mode . lsp))

;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
(setq user-full-name ""
      user-mail-address "")

;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
;; (setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
;;       doom-variable-pitch-font (font-spec :family "sans" :size 13))
;;; Add to ~/.doom.d/config.el
(setq doom-font (font-spec :family "Fira Code" :size 18)
      doom-variable-pitch-font (font-spec :family "Fira Code") ; inherits `doom-font''s :size
      doom-unicode-font (font-spec :family "Fira Mono")
      doom-big-font (font-spec :family "Fira Code" :size 22)
)

;; (let ((ligatures-to-disable '(:true :false :int :float :str :bool :list :and :or :for :not)))
(let ((ligatures-to-disable '(:true :false :str :list)))
  (dolist (sym ligatures-to-disable)
    (plist-put! +ligatures-extra-symbols sym nil)))

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
;;(setq doom-theme 'doom-one)
;;(setq neo-theme (if (display-graphic-p) 'icons 'arrow))
;;(setq neo-smart-open t)
(use-package doom-themes
  :ensure t
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-one t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  ;; (doom-themes-neotree-config)
  ;; or for treemacs users
  ;; (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
  ;; (doom-themes-treemacs-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))

;; projectile
;;(setq projectile-require-project-root t)
(setq projectile-project-search-path
      '("~/go/src/gopkg.volterra.us/via"
        "~/code/aipo"
        "~/code/c"
        "~/code/haskell"
        "~/code/omscs"
        "~/code/omscs/gios"
        "~/code/omscs/cn"
        "~/code/ml/"
        "~/code/python"
        "~/code/rust"
        "~/code/scheme"
        "~/code/scala"
        "~/code/typescript"
        "~/.config"
        "~/my-nix-config/"
        "~/notes"
        "~/org"
        "~/roamnotes"
))
;; (after! projectile (
;;     setq projectile-project-root-files-bottom-up
;;             (remove ".git" projectile-project-root-files-bottom-up)))

;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory "~/org/")
(use-package! org-auto-tangle
  :defer t
  :hook (org-mode . org-auto-tangle-mode)
  :config
  (setq org-auto-tangle-default t))

;; set org-roam
(setq org-roam-directory "~/roamnotes")
;; (use-package org-roam
;;   :ensure t
;;   ;; :init
;;   ;; (setq org-roam-v2-ack t)
;;   :custom
;;   (org-roam-directory "~/roamnotes")
  ;; :bind (("C-c n l" . org-roam-buffer-toggle)
  ;;        ("C-c n f" . org-roam-node-find)
  ;;        ("C-c n i" . org-roam-node-insert))
  ;; (org-roam-setup)
  ;; )

;; (defun org-babel-execute:json (body params)
;;   (let ((jq (cdr (assoc :jq params)))
;;         (node (cdr (assoc :node params))))
;;     (cond
;;      (jq
;;       (with-temp-buffer
;;         ;; Insert the JSON into the temp buffer
;;         (insert body)
;;         ;; Run jq command on the whole buffer, and replace the buffer
;;         ;; contents with the result returned from jq
;;         (shell-command-on-region (point-min) (point-max) (format "jq -r \"%s\"" jq) nil 't)
;;         ;; Return the contents of the temp buffer as the result
;;         (buffer-string)))
;;      (node
;;       (with-temp-buffer
;;         (insert (format "const it = %s;" body))
;;         (insert node)
;;         (shell-command-on-region (point-min) (point-max) "node -p" nil 't)
;;         (buffer-string))))))

;; (after! yaml-mode
;;   (setq-hook! 'yaml-mode-hook +format-on-save-enabled nil))

(setq avy-all-windows t)
(map! :leader
      :prefix "j"
      :desc "avy-goto-char-timer" "j" #'avy-goto-char-timer)

;; (setq epg-gpg-program "gpg2")
(setq auth-sources '("~/.authinfo"))

;; (use-package! gptel
;;   :config
;;   (setq! gptel-default-mode "org-mode")
;;   (let ((secret (auth-source-user-and-password "openai.com")))
;;     (setq gptel-api-key (car (cdr secret)))))
